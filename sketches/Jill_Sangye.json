{
  "version": "1.3.3",
  "revision": 37,
  "count": {
    "sketches": 1,
    "folders": 0
  },
  "structure": [
    {
      "type": "sketch",
      "name": "4hhxf_001",
      "mod": 1608212934902,
      "parent": "cc_4hhxf_20201217134832",
      "code": "let credits = {\n    \"student_names\": \"Sangye Zahn, Jill Limacher\",\n    \"recode_artist\": \"Frieder Nake\",\n    \"recode_title\": \"Achsenparalleler Polygonzug 25/2/65 Nr. 14\",\n    \"recode_year\": 1965\n}\n \nlet walkers = [];\nlet mySlider;\n \nfunction setup() {\n    createCanvas(windowWidth, windowHeight);\n    background(255)\n    \n    \n    buildRects();\n \n    mySlider = createSlider(1, 10, 1, .1); // min, max, default, steps\n    mySlider.position(width*.75, 50);\n    mySlider.size(250);\n    mySlider.style('-webkit-appearance', 'none')\n    mySlider.style('background', 'gray')\n    mySlider.style('height', '10px')\n    mySlider.style('border-radius', '50%')\n\n    //scale(.4)\n \n    walkers.push(new Walker(width / 2, height / 2, 55, color(0, 200, 255)));\n    walkers.push(new Walker(width * .5, height /2, 55, color(0, 0, 0)));\n    walkers.push(new Walker(width * .6, height * .92, 55, color(255, 60, 0)));\n    walkers.push(new Walker(width / 2, height / 2, 55, color(255, 255, 255)));\n \n    for(let i = 0; i < walkers.length; i++) {\n        let walker = walkers[i];\n        for(let j = 0; j < 50; j++) {\n            walker.display();\n        }\n    }\n \n    setupAudio();\n}\n \nfunction mousePressed() {\n    background(0);\n    buildRects()\n}\n \nfunction mouseReleased() {\n    background(255)\n    buildRects()\n    for(let i = 0; i < walkers.length; i++) {\n        let walker = walkers[i];\n        walker.steps = 0;\n    }\n}\n \nfunction draw() {\n    /* audio vars: amp, ampEase, fft, waveform */\n    updateAudio();\n    \t//background(0)\n\tnoFill();\n\t//randomSeed(9)\n\n \n    //vertex(mySlider.value(), );\n \n \n    for(let i = 0; i < walkers.length; i++) {\n        let walker = walkers[i];\n        if(walker.steps < 40000){\n        //walker.strokeW = 4+amp/10;\n       // walker.speedBoost = 3 + amp/100;\n        walker.display();\n        }\n    }\n \n \n    // stroke(255)\n    //strokeWeight(5)\n    //ellipse(width/2,height/2,.5,amp)\n    //line(width*.47, height*.5,5,amp)\n    //rect(width*.47, height*.2,.1*amp, amp)\n    let lc = 30;\n    for(let i = 0; i < lc; i++) {\n        let x = map(i, 0, lc - 1, 0, width);\n \n        // produces -1 «» 1 \n        let waveformSel = waveform[floor(map(i, 0, lc, 0, waveform.length))];\n \n        // produces 0 «» 255 \n        let fftSel = fft[floor(map(i, 0, lc, 0, fft.length))];\n \n        // rect(x, height / 3 + waveformSel * 150, 10);\n        // rect(x, height / 2 + fftSel, 10);\n    }\n}\n\nfunction buildRects(){\n\tpush();\n\tnoFill();\n\tstrokeWeight(1.5)\n\n\t\tfor(let i = 0; i < 10; i++) {\n\t\t\n//rot\n\t\tstroke(255, 60, 0)\n\t\tlet x = random(width * .4, width * .6);\n\t\tlet y = random(height * .01, height * .5);\n\t\trect(x, y, random(width * .1), (random(height * .35)))\n//rot2\n\tstroke(255,60, 0)\n\t\t x = random(width * .3, width * .7);\n\t\t y = random(height * .5, height * .99);\n\t\trect(x, y, random(width * .3), (random(height * .35)))\n\n//blau\n\t\tx = random(width * .45, width * .55)\n\t\ty = random(height * .01, height * .99)\n\t\tstroke(0, 200, 255)\n\t\trect(x, y, random(width * .30), (random(height * .6)))\n//weiss\n\t\tx = random(width * .45, width * .55)\n\t\ty = random(height * .01, height * .50)\n\t\tstroke(255)\n\t\trect(x, y, random(width * .10), (random(height * .3)))\n//weiss2\n\t\tx = random(width * .25, width * .65)\n\t\ty = random(height * .5, height * .99)\n\t\tstroke(255)\n\t\trect(x, y, random(width * .3), (random(height * .5)))\n//schwarz\n\t\tx = random(width * .45, width * .55)\n\t\ty = random(height * .01, height * .30)\n\t\tstroke(0)\n\t\trect(x, y, random(width * .3), (random(height * .5)))\n\t\t\n//schwarz2\n\t\t\tx = random(width * .3, width * .6)\n\t\ty = random(height * .5, height * .99)\n\t\tstroke(0)\n\t\trect(x, y, random(width * .3), (random(height * .5)))\n//schwarz3\n\t\t\tx = random(width * .3, width * .6)\n\t\ty = random(height * .45, height * .5)\n\t\tstroke(0)\n\t\trect(x, y, random(width * .3), (random(height * .5)))\n\t}\n\tpop();\n}\n \nclass Walker {\n    constructor(x, y, speed, myColor) {\n        this.pos = createVector(x, y);\n        this.ppos = createVector(x, y);\n        this.speed = speed;\n        this.speedBoost = 1.0;\n        this.myColor = myColor;\n        this.steps = 0;\n        this.strokeW = amp;\n    }\n \n    display() {\n        this.steps++;\n        strokeWeight(this.strokeW)\n        stroke(this.myColor);\n        line(this.pos.x, this.pos.y, this.ppos.x, this.ppos.y)\n \n        this.ppos = createVector(this.pos.x, this.pos.y)\n        this.r = floor(random(4));\n \n        switch (this.r) {\n            case 0:\n                this.pos.x = this.pos.x + this.speed * this.speedBoost * mySlider.value();\n                break;\n \n            case 1:\n                this.pos.x = this.pos.x - this.speed * this.speedBoost  * mySlider.value();\n                break;\n \n            case 2:\n                this.pos.y = this.pos.y + this.speed * this.speedBoost  * mySlider.value();\n                break;\n \n            case 3:\n       this.pos.y = this.pos.y - this.speed * this.speedBoost  * mySlider.value();\n        break;\n        }\n    }\n}\n \n/* AUDIO INIT */\nlet mic, fftRaw, fft = [],\n    waveform = [],\n    amp = 1.0,\n    ampStereo = {\n        l: 0.0,\n        r: 0.0\n    },\n    ampEase = 4.0,\n    numBins = 512,\n    bands = 12;\n \nfunction setupAudio() {\n    userStartAudio();\n    mic = new p5.AudioIn();\n    mic.start();\n    fftRaw = new p5.FFT(0.75, numBins);\n    fftRaw.setInput(mic);\n}\n \nfunction updateAudio() {\n    fftRaw.analyze();\n    amp = mic.getLevel() * 1500; // average mixed amplitude\n    ampStereo.l = mic.amplitude.getLevel(0) * 500; // average left amplitude\n    ampStereo.r = mic.amplitude.getLevel(1) * 500; // average right amplitude\n    ampEase = ease(amp, ampEase, 0.075); // smooth 'amp'\n    waveform = fftRaw.waveform(); // array (-1, 1)\n    fft = fftRaw.logAverages(fftRaw.getOctaveBands(bands)); // array (0, 255)\n}"
    }
  ]
}