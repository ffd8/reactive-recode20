{
  "version": "1.3.3",
  "revision": 37,
  "count": {
    "sketches": 1,
    "folders": 0
  },
  "structure": [
    {
      "type": "sketch",
      "name": "ninety_parallel_sinusoids_noah_jona",
      "mod": 1610454314858,
      "code": "let credits = {\n\t\"student_names\": \"Noah Hertzog, Jona Sciaroni\",\n\t\"recode_artist\": \"A. Michael Noll\",\n\t\"recode_title\": \"Ninety computer-generated sinusoids with linearly increasing period.\",\n\t\"recode_year\": 1960\n}\n\nlet x = 0;\nlet y = 0;\nlet sinSlider, ampSlider, freqSlider, drawSlider, offSlider, wavSlider, lineSlider, colrSlider;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\n\tsinSlider = createSlider(0.01, 10, 0.01, 0.001)\n\tsinSlider.size(250);\n\tsinSlider.position(width * .75, 760);\n\tsinSlider.style('-webkit-appearance', 'none');\n\tsinSlider.style('-webkit-slider-thumb', 'background', '255');\n\tsinSlider.style('background', '#333333');\n\tsinSlider.style('height', '5px');\n\tsinSlider.style('outline', 'none');\n\n\n\n\tampSlider = createSlider(0, 80, 60, 1)\n\tampSlider.size(250);\n\tampSlider.position(width * .75, 660);\n\tampSlider.style('-webkit-appearance', 'none');\n\tampSlider.style('background', '#333333');\n\tampSlider.style('height', '5px');\n\tampSlider.style('outline', 'none');\n\n\t/*\tfreqSlider = createSlider(17, 50, 50, 1)\n\t\tfreqSlider.size(250);\n\t\tfreqSlider.position(width * .75, 150);\n\t\tfreqSlider.style('-webkit-appearance', 'none');\n\t\tfreqSlider.style('background', '#333333');\n\t\tfreqSlider.style('height', '5px');\n\t\tfreqSlider.style('outline', 'none'); */\n\n\tdrawSlider = createSlider(14.5, 50, 14.5, 0.01)\n\tdrawSlider.size(250);\n\tdrawSlider.position(width * .75, 560);\n\tdrawSlider.style('-webkit-appearance', 'none');\n\tdrawSlider.style('background', '#333333');\n\tdrawSlider.style('height', '5px');\n\tdrawSlider.style('outline', 'none');\n\n\toffSlider = createSlider(20, 300, 135, 1)\n\toffSlider.size(250);\n\toffSlider.position(width * .75, 460);\n\toffSlider.style('-webkit-appearance', 'none');\n\toffSlider.style('background', '#333333');\n\toffSlider.style('height', '5px');\n\toffSlider.style('outline', 'none');\n\n\t/*\twavSlider = createSlider(0, 200, 90, 0.001)\n\t\twavSlider.size(250);\n\t\twavSlider.position(width * .75, 300);\n\t\twavSlider.style('-webkit-appearance', 'none');\n\t\twavSlider.style('background', '#333333');\n\t\twavSlider.style('height', '5px');\n\t\twavSlider.style('outline', 'none');\t*/\n\n\tlineSlider = createSlider(1, 120, 120, 1)\n\tlineSlider.size(250);\n\tlineSlider.position(width * .75, 360);\n\tlineSlider.style('-webkit-appearance', 'none');\n\tlineSlider.style('background', '#333333');\n\tlineSlider.style('height', '5px');\n\tlineSlider.style('outline', 'none');\n\n\tcolrSlider = createSlider(0, 255, 0);\n\tcolrSlider.position(width * .75, 260);\n\tcolrSlider.size(250);\n\tcolrSlider.style('-webkit-appearance', 'none');\n\tcolrSlider.style('background', 'black');\n\tcolrSlider.style('height', '5px');\n\tcolrSlider.style('outline', 'none');\n\n\n\tsetupAudio();\n}\n\nfunction draw() {\n\t/* audio vars: amp, ampEase, fft, waveform */\n\tupdateAudio();\n\tbackground(250)\n\tstroke(0, 0, colrSlider.value())\n\tnoFill();\n\n\tfor(let j = 0; j < lineSlider.value(); j++) { //original j<90 -> 99 anstatt 198\n\t\t// map(incomingValue, inMin, inMax);\n\t\tlet yoffset = map(j, 0, offSlider.value(), height * .12, height * .97);\n\t\tbeginShape();\n\t\tlet iLoop = 50; // 50 -> .01\n\t\tlet iSin = sinSlider.value();\n\t\tfor(let i = drawSlider.value(); i < iLoop; i = i + 1) {\n\t\t\t//y = sin(i / 20) * (i / 2);\n\t\t\ty = sin(ampEase / 10 + i * (i * iSin)) * ampSlider.value();\n\t\t\tx = map(i, 0, iLoop - 1, width, 0)\n\n\t\t\t//ellipse(x, 200 + y+(j*10), 1, 1);\n\t\t\tcurveVertex(x - 15, yoffset + y)\n\t\t}\n\t\tendShape();\n\t}\n\n\n}\n\n/* AUDIO INIT */\nlet mic, fftRaw, fft = [],\n\twaveform = [],\n\tamp = 0.0,\n\tampStereo = {\n\t\tl: 0.0,\n\t\tr: 0.0\n\t},\n\tampEase = 0.0,\n\tnumBins = 512,\n\tbands = 12;\n\nfunction setupAudio() {\n\tuserStartAudio();\n\tmic = new p5.AudioIn();\n\tmic.start();\n\tfftRaw = new p5.FFT(0.75, numBins);\n\tfftRaw.setInput(mic);\n}\n\nfunction updateAudio() {\n\tfftRaw.analyze();\n\tamp = mic.getLevel() * 1000; // average mixed amplitude\n\tampStereo.l = mic.amplitude.getLevel(0) * 500; // average left amplitude\n\tampStereo.r = mic.amplitude.getLevel(1) * 500; // average right amplitude\n\tampEase = ease(amp, ampEase, 0.075); // smooth 'amp'\n\twaveform = fftRaw.waveform(); // array (-1, 1)\n\tfft = fftRaw.logAverages(fftRaw.getOctaveBands(bands)); // array (0, 255)\n}"
    }
  ]
}