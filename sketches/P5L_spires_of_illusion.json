{
  "version": "1.3.3",
  "revision": 37,
  "count": {
    "sketches": 1,
    "folders": 0
  },
  "structure": [
    {
      "type": "sketch",
      "name": "83gqz_007",
      "mod": 1608207910057,
      "parent": "cc_83gqz_20201217113536",
      "code": "let credits = { \n    \"student_names\": \"jael sulger, fabian maloku\", \n    \"recode_artist\": \"lloyd sumner\", \n    \"recode_title\": \"spires of illusion\", \n    \"recode_year\": 1968\n} \n\nfunction preload() {\n\tobj1 = loadModel(\"https://raw.githubusercontent.com/stryke211/p5-spires-of-contribution-remake/main/3d_part1.obj\")\n\tobj2 = loadModel(\"https://raw.githubusercontent.com/stryke211/p5-spires-of-contribution-remake/main/3d_part2.obj\")\n\tobj3 = loadModel(\"https://raw.githubusercontent.com/stryke211/p5-spires-of-contribution-remake/main/3d_part3.obj\")\n\tobj4 = loadModel(\"https://raw.githubusercontent.com/stryke211/p5-spires-of-contribution-remake/main/3d_part4.obj\")\n\tobj5 = loadModel(\"https://raw.githubusercontent.com/stryke211/p5-spires-of-contribution-remake/main/3d_part5.obj\")\n\tobj6 = loadModel(\"https://raw.githubusercontent.com/stryke211/p5-spires-of-contribution-remake/main/3d_part6.obj\")\n\t\n}\n\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL);\n\tortho(-width / 2, width / 2, height / 2, -height / 2, 0);\n\tsetupAudio();\n\n\tslider1 = createSlider(0.01, 1, 0.2, 0.01); //slider for size\n\tslider1.position(width / 2 - 100, 20);\n\tslider1.style('width', '200px');\n\tslider1.style('-webkit-appearance','none');\n\tslider1.style('outline', 'none');\n\tslider1.style('background', 'lightgrey');\n\n}\n\nfunction draw() {\n\t/* audio vars: amp, ampEase, fft, waveform */\n\tupdateAudio();\n\tbackground(240);\n  let val1 = slider1.value()\n\t\n\tif(mouseIsPressed) {\n\t\tthis.rotateY((this.mouseX - this.width / 2) / (this.width / 2));\n\t\tthis.rotateX((this.mouseY - this.height / 2) / (this.width / 2));\n\t\tnormalMaterial(250);\n\t} else {\n\t\tspecularMaterial(250);\n\t}\n\n\tlet w = width\n\tlet os = 1920/w\n\tlet s = 1/os\n\t\n\ntranslate(0, -50)\n\tscale(s*1.5);\n\n\tmodel(obj1);\n\n\tpush()\n//\ttranslate(0, 0, ampEase)\n\trotateY(0.03*ampEase*val1)\n\tmodel(obj2);\n\tpop()\n\n\tpush()\n\ttranslate(0, 0, ampEase*val1)\n\trotateY(0.01*ampEase)\n\tmodel(obj3);\n\tpop()\n\t\n\t\tpush()\n\ttranslate(0, 0, ampEase*val1)\n\trotateY(ampEase*val1*0.1)\n\tmodel(obj4);\n\tpop()\n\t\n\t\tpush()\n\ttranslate(0, 0, ampEase*val1)\n\trotateX(0.02*ampEase*val1)\n\tmodel(obj5);\n\tpop()\n\t\n\tpush()\n\ttranslate(0, 0, ampEase*val1)\n\tmodel(obj6);\n\tpop()\n\n}\n\n/* AUDIO INIT */\nlet mic, fftRaw, fft = [],\n\twaveform = [],\n\tamp = 0.0,\n\tampStereo = {\n\t\tl: 0.0,\n\t\tr: 0.0\n\t},\n\tampEase = 0.0,\n\tnumBins = 512,\n\tbands = 12;\n\nfunction setupAudio() {\n\tuserStartAudio();\n\tmic = new p5.AudioIn();\n\tmic.start();\n\tfftRaw = new p5.FFT(0.75, numBins);\n\tfftRaw.setInput(mic);\n}\n\nfunction updateAudio() {\n\tfftRaw.analyze();\n\tamp = mic.getLevel() * 1000; // average mixed amplitude\n\tampStereo.l = mic.amplitude.getLevel(0) * 500; // average left amplitude\n\tampStereo.r = mic.amplitude.getLevel(1) * 500; // average right amplitude\n\tampEase = ease(amp, ampEase, 0.075); // smooth 'amp'\n\twaveform = fftRaw.waveform(); // array (-1, 1)\n\tfft = fftRaw.logAverages(fftRaw.getOctaveBands(bands)); // array (0, 255)\n}"
    }
  ]
}