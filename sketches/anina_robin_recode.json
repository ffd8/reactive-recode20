{
  "version": "1.3.3",
  "revision": 37,
  "count": {
    "sketches": 1,
    "folders": 0
  },
  "structure": [
    {
      "type": "sketch",
      "name": "recode",
      "mod": 1610613888587,
      "code": "let credits = { \n    \"student_names\": \"Anina HÃ¶gger, Robin Steiner\", \n    \"recode_artist\": \"Yoshiyuki Abe\", \n    \"recode_title\": \"Stochastica wp4118\", \n    \"recode_year\": 2000 \n} \n\nvar blobs = []\nvar freq\n\nlet layer;\n\n\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL);\n\tcolorMode(RGB);\n\tpixelDensity(1);\n\n\tlayer = createGraphics(floor(width / 6), floor(height / 6)) // use width/#, height/#\n\timageMode(CENTER)\n\trandomSeed(335)\n\t// randomSeed(22)\n\t// randomSeed(223)\n\t// randomSeed(11)\n\t//randomSeed(121224314)\n\t\n\tfor(let i = 0; i < 25; i++) {\n\t\t// x, y, radius, r, g, b, rs, c\n\t\t// additive\n\t\tblobs.push(new Blobs(random(layer.width), random(layer.height), random(255), random(60), random(75), random(75), 0, 0));\n\n\t\t// negative\n\t\tblobs.push(new Blobs(random(layer.width), random(layer.height), 25, random(-355), random(-255), random(-455), 0, 0));\n\t}\n\tslider = createSlider(0, 100, 0);\n\tslider2 = createSlider(1,5,1)\n\t// slider3 = createSlider(0,5)\n\n\t\n\tslider.size(200);\n\tslider.position(width / 2, 10);\n\tslider.style('height', '5px');\n\tslider.style('outline','none');\n\t\n\tslider2.size(200);\n\tslider2.position(width/2, 30);\n\tslider2.style('height', '5px')\n\tslider2.style('outline','none')\n\t\n\t// slider3.size(200);\n\t// slider3.position(width/2, 50)\n\t// slider3.style('height', '5px')\n\t// slider3.style('outline', 'none')\n\t\n\tsetupAudio();\n\t\n\tfreq = new p5.FFT(0,256);\n\tfreq.setInput(mic);\n\t\n\t// sliderVal3 = slider3.value()\n\t// pixelDensity(sliderVal3)\n}\n\nfunction draw() {\n\t/* audio vars: amp, ampEase, fft, waveform */\n\tupdateAudio();\n\tbackground(0)\n\tsliderVal1 = slider.value()\n\tsliderVal = map(sliderVal1, 0, 100, 0, 1)\n\t\n\tslider2Val1= slider2.value()\n\tslider2Val= map(slider2Val1, 1, 5, 0, 15)\n\tvar fr = freq.analyze()\n\tbass = freq.getEnergy(\"bass\")\n\ttreble = freq.getEnergy(\"treble\")\n\n\tl = bass*slider2Val*.7\n\tt = treble*slider2Val*1.4\n\t\n\t// print(treble)\n\t\n\n\t\n\n\n\tif(t > 1000) {\n\t\t// additive\n\t\tblobs.push(new Blobs(random(layer.width), random(layer.height), random(20), random(100), random(100), random(0), 0, 0));\n\n\t\t// negative\n\t\tblobs.push(new Blobs(random(layer.width), random(layer.height), 25, random(-355), random(-455), random(-455), 0, 0));\n\t\n\t}\n\t\n\t\tif(l > 1000) {\n\t\t// additive\n\t\tblobs.push(new Blobs(random(layer.width), random(layer.height), random(200,250), random(60), random(60), random(85), 0, 0));\n\n\t\t// negative\n\t\tblobs.push(new Blobs(random(layer.width), random(layer.height), 25, random(-355), random(-455), random(-455), 0, 0));\n\t\t\n\t\n\t}\n\tif(blobs.length > 50) {\n\t\tblobs.splice(0, 10);\n\t\t\n\t\tif(t>1000){\n\t\t\t\tif(blobs.length > 20) {\n\t\tblobs.splice(0, 10);\n\t\t\t\t}\n\t\t}\n\t}\n\n\n\n//print(l)\n\n\tlayer.loadPixels();\n\tfor(x = 0; x < layer.width; x++) {\n\t\tfor(y = 0; y < layer.height; y++) {\n\t\t\tlet sumR = 0;\n\t\t\tlet sumG = 0;\n\t\t\tlet sumB = 0;\n\t\t\tlet sumC = 0;\n\t\t\tfor(i = 0; i < blobs.length; i++) {\n\t\t\t\t// blobs[i].update();\n\t\t\t\tlet xdif = x - blobs[i].x;\n\t\t\t\tlet ydif = y - blobs[i].y;\n\t\t\t\tlet d = sqrt((xdif * xdif) + (ydif * ydif));\n\t\t\t\tsumR += blobs[i].radius * blobs[i].r / d - blobs[i].rs;\n\t\t\t\tsumG += blobs[i].radius * blobs[i].g / d - blobs[i].rs;\n\t\t\t\tsumB += blobs[i].radius * blobs[i].b / d - blobs[i].rs;\n\t\t\t}\n\n\t\t\tlayer.set(x, y, color(sumR - sumC, sumG - sumC, sumB - sumC, 205));\n\n\t\t}\n\t}\n\n\tfor(i = 0; i < blobs.length; i++) {\n\t\tblobs[i].update();\n\t}\n\n\n\tlayer.updatePixels();\n\n\timage(layer, 0, 0, width, height)\n\n}\n\n\n\nclass Blobs {\n\n\tconstructor(x, y, radius, r, g, b, rs, c) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tlet angle = random(0, 2 * PI);\n\t\tthis.radius = radius;\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\t\tthis.rs = rs;\n\t\tthis.c = c;\n\t\tthis.xspeed = random(2, 5) * Math.cos(angle);\n\t\tthis.yspeed = random(2, 5) * Math.sin(angle);\n\n\t}\n\n\tupdate() {\n\t\tthis.x += this.xspeed * sliderVal;\n\t\tthis.y += this.yspeed * sliderVal;\n\t\tif(this.x > layer.width || this.x < 0) this.xspeed *= -1;\n\t\tif(this.y > layer.height || this.y < 0) this.yspeed *= -1;\n\n\t}\n\n\tshow() {\n\t\tnoFill();\n\t\tstroke(0);\n\t\tstrokeWeight(4);\n\t\tellipse(this.x, this.y, this.radius * 2);\n\n\t}\n}\n\n/* AUDIO INIT */\nlet mic, fftRaw, fft = [],\n\twaveform = [],\n\tamp = 0.0,\n\tampStereo = {\n\t\tl: 0.0,\n\t\tr: 0.0\n\t},\n\tampEase = 0.0,\n\tnumBins = 512,\n\tbands = 12;\n\nfunction setupAudio() {\n\tuserStartAudio();\n\tmic = new p5.AudioIn();\n\tmic.start();\n\tfftRaw = new p5.FFT(0.75, numBins);\n\tfftRaw.setInput(mic);\n}\n\nfunction updateAudio() {\n\tfftRaw.analyze();\n\tamp = mic.getLevel() * 1000; // average mixed amplitude\n\tampStereo.l = mic.amplitude.getLevel(0) * 500; // average left amplitude\n\tampStereo.r = mic.amplitude.getLevel(1) * 500; // average right amplitude\n\tampEase = ease(amp, ampEase, 0.075); // smooth 'amp'\n\twaveform = fftRaw.waveform(); // array (-1, 1)\n\tfft = fftRaw.logAverages(fftRaw.getOctaveBands(bands)); // array (0, 255)\n}"
    }
  ]
}