{
  "version": "1.3.4",
  "revision": 39,
  "count": {
    "sketches": 1,
    "folders": 0
  },
  "structure": [
    {
      "type": "sketch",
      "name": "richardPaulLohse_larissaHaenggli_sarahGlauser_corr",
      "mod": 1610034191481,
      "code": "let credits = {\n\t\"student_names\": \"Larissa Haenggli, Sarah Glauser\",\n\t\"recode_artist\": \"Richard Paul Lohse\",\n\t\"recode_title\": \"15 systematic color rows with vertical condensation\",\n\t\"recode_year\": 1950 \n}\n\nlet sliderSat, sliderFrec, sliderColormotion, sliderAmp, sliderBg;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tcolorMode(HSB, 100);\n\tc1 = color(100);\n\tc2 = color(0);\n\ttextAlign(CENTER,CENTER);\n\t\n\tsliderColormotion = createSlider(0, 5, 0, 0.1);\n\tsliderColormotion.position(width - 220, -3);\n\tsliderColormotion.style('-webkit-appearance', 'none');\n\tsliderColormotion.style('background', 'white');\n\tsliderColormotion.style('outline', 'none');\n\tsliderColormotion.style('height', height / 30 + 'px');\n\tsliderColormotion.style('width', '200px');\n\t\n\tsliderFrec = createSlider(0, height * .03, 0, 1);\n\tsliderFrec.position(width - 220, height / 15 - 2);\n\tsliderFrec.style('-webkit-appearance', 'none');\n\tsliderFrec.style('background', 'white');\n\tsliderFrec.style('outline', 'none');\n\tsliderFrec.style('height', height / 30 + 'px');\n\tsliderFrec.style('width', '200px');\n\n\tsliderSat = createSlider(0, 100, 0, 1);\n\tsliderSat.position(width - 220, height / 15 * 2 - 2);\n\tsliderSat.style('-webkit-appearance', 'none');\n\tsliderSat.style('background', 'white');\n\tsliderSat.style('outline', 'none');\n\tsliderSat.style('height', height / 30 + 'px');\n\tsliderSat.style('width', '200px');\n\t\n\tsliderAmp = createSlider(0, 1, 0, 1);\n\tsliderAmp.position(width - 220, height / 15 * 3 - 2);\n\tsliderAmp.style('-webkit-appearance', 'none');\n\tsliderAmp.style('background', 'white');\n\tsliderAmp.style('outline', 'none');\n\tsliderAmp.style('height', height / 30 + 'px');\n\tsliderAmp.style('width', '200px');\n\t\n\tsliderMovingSat = createSlider(0, 1, 0, 0.01);\n\tsliderMovingSat.position(width - 220, height / 15 * 4 - 2);\n\tsliderMovingSat.style('-webkit-appearance', 'none');\n\tsliderMovingSat.style('background', 'white');\n\tsliderMovingSat.style('outline', 'none');\n\tsliderMovingSat.style('height', height / 30 + 'px');\n\tsliderMovingSat.style('width', '200px');\n\t\n\tsliderBg = createSlider(0,0.1,0,0.001)\n\tsliderBg.position(width - 220,height / 15 * 5 - 2)\n\tsliderBg.style('-webkit-appearance', 'none');\n\tsliderBg.style('background', 'white');\n\tsliderBg.style('outline', 'none');\n\tsliderBg.style('height', height / 30 + 'px');\n\tsliderBg.style('width', '200px');\n\t\n\n\tmyArray2 = [\n\t\twidth,\n\t\twidth * 0.9775,\n\t\twidth * 0.9325,\n\t\twidth * 0.8425,\n\t\twidth * 0.6625,\n\t\twidth * 0.5725,\n\t\twidth * 0.5275,\n\t\twidth * 0.505,\n\t\twidth * 0.495,\n\t\twidth * 0.4725,\n\t\twidth * 0.4275,\n\t\twidth * 0.3375,\n\t\twidth * 0.1575,\n\t\twidth * 0.0675,\n\t\twidth * 0.0225\n\t];\n\n\tsetupAudio();\n}\n\nfunction draw() {\n\t/* audio vars: amp, ampEase, fft, waveform */\n\tupdateAudio();\n\t\n\tfor(let y=0; y<width; y++){\n    n = map(y,0,width,0,1);\n    let newc = lerpColor(c1,c2,n);\n    stroke(newc);\n    line(0,y,width, y);\n  }\n  noStroke();\n\n\tfor(let j = 0; j < 16; j++) {\n\t\tlet x = map(j, 0, 15, 0, height);\n\n\t\tfor(let i = 0; i < myArray2.length; i++) {\n\t\t\t\tlet breite = myArray2[i];\n\t\t\t\tlet u = -(85 + i * 7 + frameCount*sliderColormotion.value() + j*j*10) %100;\n\t\t\t\tlet sat = map(ampEase, 0, 255, 0, 100);\n\n\t\t\t\tfill(u, 80 - sat, 100-i*j*sliderMovingSat.value()*(0.2*frameCount)%100);\n\t\t\t\tif(u < 0) {\n\t\t\t\t\tfill(u + 100, 75 , 70-i*j*sliderMovingSat.value()*(0.2*frameCount)%100);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// let m = height/15*ampEase*sliderAmp.value()\n\t\t\t\tlet m = sat*sliderAmp.value();\n\t\t\t\t\n\t\t\t\trect(0, x, breite+ (ampEase * sliderBg.value()*breite), height/15-m);\n\t\t}\n\t\t\t\n\t\t/* horizontal audio reactive rectangles */\n\t\tfor(k = 0; k < fft.length; k+=4.25) {\n\t\t\tlet hoehe1 = map(k, 0, fft.length - 1, 0, height-3);\n\t\t\tlet breite2 = sliderFrec.value() * fft[k];\n\t\t\tlet farbe = map(k, 0, fft.length - 1, 0, 100);\n\t\t\tfill(farbe, sliderSat.value(), 100);\n\t\t\trect(0, hoehe1, breite2, height / 15);\n\t\t}\n\t}\n\t\n\tfill('white');\n\ttextSize(12)\n\ttextFont('monospace')\n\ttext('animate colors', width-125, height/30+10);\n\ttext('show frequency', width-125, height/30*3+10);\n\ttext('color frequency', width-125, height/30*5+10);\n\ttext('show volume', width-125, height/30*7+10);\n\ttext('animate saturation', width-125, height/30*9+10);\n\ttext('horizontal move', width-125, height/30*11+10);\n\t\n}\n\n/* AUDIO INIT */\nlet mic, fftRaw, fft = [],\n\twaveform = [],\n\tamp = 0.0,\n\tampStereo = {\n\t\tl: 0.0,\n\t\tr: 0.0\n\t},\n\tampEase = 0.0,\n\tnumBins = 512,\n\tbands = 12;\n\nfunction setupAudio() {\n\tuserStartAudio();\n\tmic = new p5.AudioIn();\n\tmic.start();\n\tfftRaw = new p5.FFT(0.75, numBins);\n\tfftRaw.setInput(mic);\n}\n\nfunction updateAudio() {\n\tfftRaw.analyze();\n\tamp = mic.getLevel() * 1000; // average mixed amplitude\n\tampStereo.l = mic.amplitude.getLevel(0) * 500; // average left amplitude\n\tampStereo.r = mic.amplitude.getLevel(1) * 500; // average right amplitude\n\tampEase = ease(amp, ampEase, 0.075); // smooth 'amp'\n\twaveform = fftRaw.waveform(); // array (-1, 1)\n\tfft = fftRaw.logAverages(fftRaw.getOctaveBands(bands)); // array (0, 255)\n}"
    }
  ]
}