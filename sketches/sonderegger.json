{
  "version": "1.3.3",
  "revision": 37,
  "count": {
    "sketches": 1,
    "folders": 0
  },
  "structure": [
    {
      "type": "sketch",
      "name": "new_012",
      "mod": 1608210537056,
      "code": "let credits = { \n    \"student_names\": \"Andri Stoisser, Sofia Camprubi\", \n    \"recode_artist\": \"Bruno Sonderegger\", \n    \"recode_title\": \"Schmetterling\", \n    \"recode_year\": 1971 \n} \n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tbackground(255)\n\tangleMode(DEGREES)\n\tsetupAudio();\n\n\t// SLIDERS\n\tsliderWidth = createSlider(0, 100, 0);\n\tsliderWidth.position(width * .85, height * .04) // x,y\n\tsliderWidth.size(width * .1)\n\tsliderWidth.style('-webkit-appearance', 'none');\n\tsliderWidth.style('background', 'black');\n\tsliderWidth.style('outline', 'none');\n\tsliderWidth.style('height', '3px');\n\tsliderWidth.style('cursor', 'pointer');\n\n\t// hi slider\n\thiS = createSlider(.4996, 1, .4996, .05); // minValue, maxValue, defaultValue, stepSize\n\thiS.position(width * .85, height * .06) // x,y\n\thiS.size(width * .1)\n\thiS.style('-webkit-appearance', 'none');\n\thiS.style('background', 'black');\n\thiS.style('outline', 'none');\n\thiS.style('height', '3px');\n\thiS.style('cursor', 'pointer');\n\n\tsliWidthBig = createSlider(-.25, .25, 0, 0); // minValue, maxValue, defaultValue, stepSize\n\tsliWidthBig.position(width * .85, height * .08) // x,y\n\tsliWidthBig.size(width * .1)\n\tsliWidthBig.style('-webkit-appearance', 'none');\n\tsliWidthBig.style('background', 'black');\n\tsliWidthBig.style('outline', 'none');\n\tsliWidthBig.style('height', '3px');\n\tsliWidthBig.style('cursor', 'pointer');\n\n\tsliderHight = createSlider(0, 100, 0);\n\tsliderHight.position(width * .85, height * .14) // x,y\n\tsliderHight.size(width * .1)\n\tsliderHight.style('-webkit-appearance', 'none');\n\tsliderHight.style('background', 'black');\n\tsliderHight.style('outline', 'none');\n\tsliderHight.style('height', '3px');\n\tsliderHight.style('cursor', 'pointer');\n\n\t// n slider\n\tnS = createSlider(1, 19, 19, 1); // minValue, maxValue, defaultValue, stepSize\n\tnS.position(width * .85, height * .16) // x,y\n\tnS.size(width * .1)\n\tnS.style('-webkit-appearance', 'none');\n\tnS.style('background', 'black');\n\tnS.style('outline', 'none');\n\tnS.style('height', '3px');\n\tnS.style('cursor', 'pointer');\n\n\t// stokeWeight slider\n\tsliderStrokeWeight = createSlider(0.5, 5, 0.5, 0);\n\tsliderStrokeWeight.position(width * .85, height * .22) // x,y\n\tsliderStrokeWeight.size(width * .1)\n\tsliderStrokeWeight.style('-webkit-appearance', 'none');\n\tsliderStrokeWeight.style('background', 'black');\n\tsliderStrokeWeight.style('outline', 'none');\n\tsliderStrokeWeight.style('height', '3px');\n\tsliderStrokeWeight.style('cursor', 'pointer');\n\n\t// fill alpha slider\n\talphaS = createSlider(0, 200, 0, 1); // minValue, maxValue, defaultValue, stepSize\n\talphaS.position(width * .85, height * .24) // x,y\n\talphaS.size(width * .1)\n\talphaS.style('-webkit-appearance', 'none');\n\talphaS.style('background', 'black');\n\talphaS.style('outline', 'none');\n\talphaS.style('height', '3px');\n\talphaS.style('cursor', 'pointer');\n\n\t// red color slider\n\tredS = createSlider(0, 255, 0, 1); // minValue, maxValue, defaultValue, stepSize\n\tredS.position(width * 0.85, height * 0.3) // x,y\n\tredS.size(width * 0.1)\n\tredS.style('-webkit-appearance', 'none');\n\tredS.style('background', 'black');\n\tredS.style('outline', 'none');\n\tredS.style('height', '3px');\n\tredS.style('cursor', 'pointer');\n\n\t// yellow color slider\n\tyellowS = createSlider(0, 255, 0, 1); // minValue, maxValue, defaultValue, stepSize\n\tyellowS.position(width * .85, height * .32) // x,y\n\tyellowS.size(width * .1)\n\tyellowS.style('-webkit-appearance', 'none');\n\tyellowS.style('background', 'black');\n\tyellowS.style('outline', 'none');\n\tyellowS.style('height', '3px');\n\tyellowS.style('cursor', 'pointer');\n\n\t// blue color slider\n\tblueS = createSlider(0, 255, 0, 1); // minValue, maxValue, defaultValue, stepSize\n\tblueS.position(width * .85, height * .34) // x,y\n\tblueS.size(width * .1)\n\tblueS.style('-webkit-appearance', 'none');\n\tblueS.style('background', 'black');\n\tblueS.style('outline', 'none');\n\tblueS.style('height', '3px');\n\tblueS.style('cursor', 'pointer');\n\n\t// background color slider\n\tbackgroundS = createSlider(0, 255, 255, 5); // minValue, maxValue, defaultValue, stepSize\n\tbackgroundS.position(width * .85, height * .36) // x,y\n\tbackgroundS.size(width * .1)\n\tbackgroundS.style('-webkit-appearance', 'none');\n\tbackgroundS.style('background', 'black');\n\tbackgroundS.style('outline', 'none');\n\tbackgroundS.style('height', '3px');\n\tbackgroundS.style('cursor', 'pointer');\n\n\t// background alpa slider\n\tsliderPaint = createSlider(0, 100, 100,10);\n\tsliderPaint.position(width * .85, height * .38) // x,y\n\tsliderPaint.size(width * .1)\n\tsliderPaint.style('-webkit-appearance', 'none');\n\tsliderPaint.style('background', 'black');\n\tsliderPaint.style('outline', 'none');\n\tsliderPaint.style('height', '3px');\n\tsliderPaint.style('cursor', 'pointer');\n\n\t// amp1 slider\n\tsliderAmp1 = createSlider(0, 1.0, 0, 0.1);\n\tsliderAmp1.position(width * .85, height * .44) // x,y\n\tsliderAmp1.size(width * .1)\n\tsliderAmp1.style('-webkit-appearance', 'none');\n\tsliderAmp1.style('background', 'black');\n\tsliderAmp1.style('outline', 'none');\n\tsliderAmp1.style('height', '3px');\n\tsliderAmp1.style('cursor', 'pointer');\n\n\t// AMP fft\n\tsliderFft = createSlider(0, 1.0, 0, 0);\n\tsliderFft.position(width * .85, height * .46) // x,y\n\tsliderFft.size(width * .1)\n\tsliderFft.style('-webkit-appearance', 'none');\n\tsliderFft.style('background', 'black');\n\tsliderFft.style('outline', 'none');\n\tsliderFft.style('height', '3px');\n\tsliderFft.style('cursor', 'pointer');\n\n}\n\nfunction draw() {\n\t/* audio vars: amp, ampEase, fft, waveform */\n\n\tlet sliWidth = sliderWidth.value();\n\tlet sliHi = sliderHight.value();\n\tlet sliAmp1 = sliderAmp1.value();\n\tlet sliStrokeWeight = sliderStrokeWeight.value();\n\tlet sliPaint = sliderPaint.value();\n\tlet slWidthBig = sliWidthBig.value();\n\n\n\n\tupdateAudio();\n\tbackground(backgroundS.value(),sliPaint);\n\ttranslate(width / 2, 0)\n\n\n\n\tn = nS.value() // anzahl \"streifen\"\n\n\thi = hiS.value()\n\t//swidth = -.25 + (amp % 0.5 * sliAmp1) + sliWidth / 420 - slWidthBig;\n\tswidth = -.25 + (ampEase * sliAmp1 / 100) + sliWidth / 420 - slWidthBig;\n\tswidth_big = .25 + slWidthBig;\n\ts_length = .47 + sliHi / 50;\n\ty1 = .02;\n\ty2 = .05;\n\n\n\n\tswidth2 = .25 - (ampEase * sliAmp1 / 100) - sliWidth / 420 - slWidthBig;\n\tswidth_big2 = -.25 + slWidthBig;\n\n\twing(true)\n\twing(false)\n\n\tpush();\n\ttranslate(0, height)\n\trotate(180)\n\twing(true)\n\twing(false)\n\tpop();\n}\n\nfunction wing(mirror) {\n\tlet slFft = sliderFft.value();\n\n\tfill(0, alphaS.value());\n\tstroke(redS.value(), yellowS.value(), blueS.value());\n\tstrokeWeight(sliderStrokeWeight.value());\n\n\tbeginShape();\n\tfor(i = 0; i < n; i++) {\n\n\t\tlet waveformSel = waveform[floor(map(i, 0, n, 0, waveform.length))]; // -1, 1\n\t\t// +waveformSel*50\n\n\t\tlet fftSel = fft[floor(map(i, 0, n, 0, fft.length))]; // 0 - 255\n\t\t// + fftSel\n\t\tif(mirror) {\n\t\t\tvertex(width * swidth + slFft * waveformSel * 500, height * hi);\n\t\t\tvertex(width * swidth_big + slFft * waveformSel * 500, height * (y1 + i / n) * s_length);\n\t\t\tvertex(width * swidth_big + slFft * waveformSel * 500, height * (y2 + i / n) * s_length);\n\t\t} else {\n\t\t\tvertex(width * swidth2 + slFft * waveformSel * 500, height * hi);\n\t\t\tvertex(width * swidth_big2 + slFft * waveformSel * 500, height * (y1 + i / n) * s_length);\n\t\t\tvertex(width * swidth_big2 + slFft * waveformSel * 500, height * (y2 + i / n) * s_length);\n\t\t}\n\t}\n\tendShape(CLOSE);\n\n\t//print(amp);\n}\n\n/* AUDIO INIT */\nlet mic, fftRaw, fft = [],\n\twaveform = [],\n\tamp = 0.0,\n\tampStereo = {\n\t\tl: 0.0,\n\t\tr: 0.0\n\t},\n\tampEase = 0.0,\n\tnumBins = 512,\n\tbands = 12;\n\nfunction setupAudio() {\n\tuserStartAudio();\n\tmic = new p5.AudioIn();\n\tmic.start();\n\tfftRaw = new p5.FFT(0.75, numBins);\n\tfftRaw.setInput(mic);\n}\n\nfunction updateAudio() {\n\tfftRaw.analyze();\n\tamp = mic.getLevel() * 1000; // average mixed amplitude\n\tampStereo.l = mic.amplitude.getLevel(0) * 500; // average left amplitude\n\tampStereo.r = mic.amplitude.getLevel(1) * 500; // average right amplitude\n\tampEase = ease(amp, ampEase, 0.075); // smooth 'amp'\n\twaveform = fftRaw.waveform(); // array (-1, 1)\n\tfft = fftRaw.logAverages(fftRaw.getOctaveBands(bands)); // array (0, 255)\n}"
    }
  ]
}